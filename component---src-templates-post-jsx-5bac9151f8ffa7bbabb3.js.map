{"version":3,"sources":["webpack:///./src/templates/post.jsx"],"names":["Post","data","prismicPost","posts","location","categories","category","map","c","document","name","header","date","customSEO","title","text","website","titleAlt","pathname","desc","description","node","article","dark","id","masthead","allSlices","body","nodes","pageQuery"],"mappings":"kQA8CeA,UAtCF,SAAC,GAAgD,IAAD,IAA7CC,KAAQC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACpCH,EAASC,EAATD,KACJI,GAAa,EACbJ,EAAKI,WAAW,GAAGC,WACrBD,EAAaJ,EAAKI,WAAWE,KAAI,SAAAC,GAAC,OAAIA,EAAEF,SAASG,SAAS,GAAGR,KAAKS,SAGpE,IAAMC,EACJ,8BACGV,EAAKW,KADR,MACiBP,GAAc,YAAC,IAAD,CAAYA,WAAYA,KAIzD,OACE,YAAC,IAAD,CAAQQ,WAAS,GACf,YAAC,IAAD,CACEC,MAAUb,EAAKa,MAAMC,KAAhB,MAA0BC,IAAQC,SACvCC,SAAUd,EAASc,SACnBC,KAAMlB,EAAKmB,YACXC,KAAMnB,EACNoB,SAAO,IAET,YAAC,IAAD,CACEC,MAAM,EACNC,GAAG,cACHd,KAAMT,EAAKa,MAAMC,KACjBU,UAAU,IAEZ,YAAC,IAAD,CAASD,GAAG,OAAOd,KAAMC,GACvB,YAAC,IAAD,CAAee,UAAWzB,EAAK0B,QAEjC,YAAC,IAAD,CAASJ,MAAM,EAAMC,GAAG,eAAed,KAAK,kBAC1C,YAAC,IAAD,CAASP,MAAOA,EAAMyB,WAQvB,IAAMC,EAAS","file":"component---src-templates-post-jsx-5bac9151f8ffa7bbabb3.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Layout, Listing, PostSliceZone } from \"../components\"\nimport Categories from \"../components/Listing/Categories\"\nimport Section from \"../components/Section\"\nimport website from \"../../config\"\nimport SEO from \"../components/SEO\"\n\nconst Post = ({ data: { prismicPost, posts }, location }) => {\n  const { data } = prismicPost\n  let categories = false\n  if (data.categories[0].category) {\n    categories = data.categories.map(c => c.category.document[0].data.name)\n  }\n\n  const header = (\n    <>\n      {data.date} — {categories && <Categories categories={categories} />}\n    </>\n  )\n\n  return (\n    <Layout customSEO>\n      <SEO\n        title={`${data.title.text} | ${website.titleAlt}`}\n        pathname={location.pathname}\n        desc={data.description}\n        node={prismicPost}\n        article\n      />\n      <Section\n        dark={true}\n        id=\"post_header\"\n        name={data.title.text}\n        masthead={true}\n      />\n      <Section id=\"post\" name={header}>\n        <PostSliceZone allSlices={data.body} />\n      </Section>\n      <Section dark={true} id=\"recent_posts\" name=\"Недавние посты\">\n        <Listing posts={posts.nodes} />\n      </Section>\n    </Layout>\n  )\n}\n\nexport default Post\n\nexport const pageQuery = graphql`\n  query PostBySlug($uid: String!) {\n    prismicPost(uid: { eq: $uid }) {\n      uid\n      first_publication_date\n      last_publication_date\n      data {\n        title {\n          text\n        }\n        description\n        date(formatString: \"DD.MM.YYYY\")\n        categories {\n          category {\n            document {\n              data {\n                name\n              }\n            }\n          }\n        }\n        body {\n          ... on PrismicPostBodyText {\n            slice_type\n            id\n            primary {\n              text {\n                html\n              }\n            }\n          }\n          ... on PrismicPostBodyCodeBlock {\n            slice_type\n            id\n            primary {\n              code_block {\n                html\n              }\n            }\n          }\n          ... on PrismicPostBodyQuote {\n            slice_type\n            id\n            primary {\n              quote {\n                html\n                text\n              }\n            }\n          }\n          ... on PrismicPostBodyImage {\n            slice_type\n            id\n            primary {\n              image {\n                localFile {\n                  childImageSharp {\n                    fluid(maxWidth: 1200, quality: 90) {\n                      ...GatsbyImageSharpFluid_withWebp\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    posts: allPrismicPost(\n      limit: 2\n      sort: { fields: [data___date], order: DESC }\n      filter: { uid: { ne: $uid } }\n    ) {\n      nodes {\n        uid\n        data {\n          title {\n            text\n          }\n          date(formatString: \"DD.MM.YYYY\")\n          categories {\n            category {\n              document {\n                data {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}